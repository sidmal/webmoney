// Code generated by mockery v2.0.4. DO NOT EDIT.

package mocks

import (
	binary "encoding/binary"
	io "io"

	mock "github.com/stretchr/testify/mock"
)

// ExternalInterface is an autogenerated mock type for the ExternalInterface type
type ExternalInterface struct {
	mock.Mock
}

// BinaryRead provides a mock function with given fields: r, order, data
func (_m *ExternalInterface) BinaryRead(r io.Reader, order binary.ByteOrder, data interface{}) error {
	ret := _m.Called(r, order, data)

	var r0 error
	if rf, ok := ret.Get(0).(func(io.Reader, binary.ByteOrder, interface{}) error); ok {
		r0 = rf(r, order, data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// BinaryWrite provides a mock function with given fields: w, order, data
func (_m *ExternalInterface) BinaryWrite(w io.Writer, order binary.ByteOrder, data interface{}) error {
	ret := _m.Called(w, order, data)

	var r0 error
	if rf, ok := ret.Get(0).(func(io.Writer, binary.ByteOrder, interface{}) error); ok {
		r0 = rf(w, order, data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RandRead provides a mock function with given fields: b
func (_m *ExternalInterface) RandRead(b []byte) (int, error) {
	ret := _m.Called(b)

	var r0 int
	if rf, ok := ret.Get(0).(func([]byte) int); ok {
		r0 = rf(b)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func([]byte) error); ok {
		r1 = rf(b)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
